import java.util.*;
/**
 * CountSubsetDifference : same as minimum subset sum here differnce is given.
 * 
 * Problem :
 * you have to return count for given differnce generated by subset.
 * 
 * actual problem statement is this you have two choices on selection of number to make subset
 * where either take number as positive or nagative. with that you have to make sum of those as equal variable x and return count of possiblities.
 * 
 * s1 + s2 = range
 * s1 - s2 = diff (given)
 * 2 * s1 = diff + range
 * s1 = ( diff + range ) / 2;
 */
public class CountSubsetDifference {

    static int countSubsetsWithSum(int nums[], int n, int sum, int[][] dp) {
        if (sum == 0) return 1;
        if (n == 0) return 0;

        if (dp[n][sum] != 0) return dp[n][sum];

        if (nums[n - 1] <= sum) {
            dp[n][sum] = countSubsetsWithSum(nums, n - 1, sum - nums[n - 1], dp) 
                       + countSubsetsWithSum(nums, n - 1, sum, dp);
        } else {
            dp[n][sum] = countSubsetsWithSum(nums, n - 1, sum, dp);
        }
        return dp[n][sum];
    }

    public static void main(String[] args) {
        int[] nums = {1,1,2,3};
        int diff = 1;

        int range = 0;
        for (int i = 0; i < nums.length; i++) {
            range += nums[i];
        }

        int[][] dp = new int[nums.length+1][range+1];

        int s1 = ( diff + range ) / 2;
        int count = countSubsetsWithSum(nums, nums.length, s1, dp);

        System.out.println(count);
    }
}